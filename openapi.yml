openapi: "3.0.3"
info:
  title: Location Share
  version: "1.0"
  description: Location Share API.
servers:
  - url: "{protocol}://{host}:{port}/{endpoint}"
    description: Development server
    variables:
      protocol:
        enum:
          - http
          - https
        default: http
      host:
        default: localhost
      port:
        default: "8080"
      endpoint:
        default: v1
tags:
  - name: sessions
    description: Sessions operations
  - name: users
    description: Users operations
  - name: shares
    description: Shares operations
  - name: locations
    description: Locations operations
  - name: shared-locations
    description: Get the locations shared with the user
components:
  schemas:
    location:
      type: object
      properties:
        id:
          type: string
          format: uuid
        user_id:
          type: string
          format: uuid
        latitude:
          type: number
        longitude:
          type: number
        created_at:
          type: string
          format: date-time
  securitySchemes:
    read_token:
      description: Read access token. They can't write any settings or location data.
      type: http
      scheme: bearer
      bearerFormat: JWT
    write_token:
      description: Write access token. They can write settings and location data.
      type: http
      scheme: bearer
      bearerFormat: JWT
paths:
  /sessions:
    post:
      tags:
        - sessions
      summary: Create a new session
      description: Create a new token to access the API
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@exameple.com"
                password:
                  type: string
                  example: "password"
                read_only:
                  type: boolean
                  example: false
                name:
                  type: string
                  example: "Galaxy S24+"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing email or password"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Invalid email or password"
    get:
      tags:
        - sessions
      summary: Get all sessions
      description: Get all sessions of a user
      security:
        - read_token: []
        - write_token: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    name:
                      type: string
                      example: "Galaxy S24+"
                    created_at:
                      type: string
                      format: date-time
                      example: "2021-01-01T00:00:00Z"
                    last_access:
                      type: string
                      format: date-time
                      example: "2021-01-01T00:00:00Z"
    delete:
      tags:
        - sessions
      summary: Delete a session
      description: Delete a session of a user
      security:
        - write_token: []
      parameters:
        - name: session_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Session deleted"
  /users:
    post:
      tags:
        - users
      summary: Create a new user
      description: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
                username:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
                  name:
                    type: string
                  username:
                    type: string
                  created_at:
                    type: string
                    format: date-time
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing email, password, name or username"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "User already exists"
    get:
      tags:
        - users
      summary: Get all users of a server
      description: Get all users of a server
      security:
        - read_token: []
      parameters:
        - name: id
          in: query
          required: false
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    email:
                      type: string
                      format: email
                    name:
                      type: string
                    username:
                      type: string
                    created_at:
                      type: string
                      format: date-time
    delete:
      tags:
        - users
      summary: Delete a user
      description: Delete a user
      security:
        - write_token: []
      parameters:
        - name: user_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User deleted"
    put:
      tags:
        - users
      summary: Update a user
      description: Update a user
      security:
        - write_token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                name:
                  type: string
                username:
                  type: string
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  email:
                    type: string
                    format: email
                  name:
                    type: string
                  username:
                    type: string
                  created_at:
                    type: string
                    format: date-time
  /shares:
    post:
      tags:
        - shares
      summary: Share a location with a user
      description: Share a location with a user
      security:
        - write_token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  format: uuid
                  example: "123e4567-e89b-12d3-a456-426614174000"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Location shared"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Missing user_id"
        "409":
          description: Conflict
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Share already shared"
    get:
      tags:
        - shares
      summary: Get all shares of a user
      description: Get all shares of a user
      parameters:
        - name: shared_for
          in: query
          required: false
          schema:
            type: string
            format: uuid
        - name: shared_by
          in: query
          required: false
          schema:
            type: string
            format: uuid
      security:
        - read_token: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      format: uuid
                    shared_by:
                      type: string
                      format: uuid
                    shared_for:
                      type: string
                      format: uuid
                    valid_until:
                      type: string
                      format: date-time
                    created_at:
                      type: string
                      format: date-time
    delete:
      tags:
        - shares
      summary: Delete a share
      description: Delete a share
      security:
        - write_token: []
      parameters:
        - name: share_id
          in: query
          required: true
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: object
  /locations:
    post:
      tags:
        - locations
      summary: Create a new location
      description: Create a new location
      security:
        - write_token: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/location"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/location"
    get:
      tags:
        - locations
      summary: Get all locations of a user
      description: Get all locations of a user
      security:
        - read_token: []
      parameters:
        - name: date-start
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: date-end
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/location"
    delete:
      tags:
        - locations
      summary: Delete locations
      description: Delete locations of a user
      security:
        - write_token: []
      parameters:
        - name: date-start
          in: query
          required: true
          schema:
            type: string
            format: date-time
        - name: date-end
          in: query
          required: true
          schema:
            type: string
            format: date-time
      responses:
        "200":
          description: OK
  /shared-locations:
    get:
      tags:
        - shared-locations
      summary: Get all locations shared with the user
      description: Get all locations shared with the user
      parameters:
        - name: user_ids
          in: query
          required: true
          schema:
            type: array
            items:
              type: string
              format: uuid
      security:
        - read_token: []
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/location"
